/*
Given an array of integers, every element appears three times except for one. Find that single one.

Note:
Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?
*/


public class Solution {
    public int singleNumber(int[] A) {
        int target = A[0];
        Map<Integer, Integer> map=new HashMap<Integer, Integer>();
        for (int i = 0; i < A.length; i++){
    	      if (map.containsKey(A[i])){
    		        map.put(A[i], map.get(A[i])+1);
    	      }else{
    		        map.put(A[i], 1);
    	      }
        }
        Iterator<Map.Entry<Integer, Integer>> iter = map.entrySet().iterator();
        while(iter.hasNext()){
          	Map.Entry<Integer, Integer> entry = iter.next();
          	if(entry.getValue() != 3){                          // change this number for I(2), II(3)
    	        	target = entry.getKey();
    	        	break;
    	      }
        }
        return target;	    
    }
}
