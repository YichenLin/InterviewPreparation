/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> pathSum(TreeNode root, int sum) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        ArrayList<Integer> path = new ArrayList<Integer>();
        helper(root,sum,result,path);
        return result;
    }
    
    void helper(TreeNode root, int sum, ArrayList<ArrayList<Integer>> result, ArrayList<Integer> path){
        if(root==null) return;
        // find suitable leaf node
        if(root.val==sum && root.left==null && root.right==null){
            path.add(root.val);
            ArrayList<Integer> temp = new ArrayList<Integer>(path);
            result.add(temp);
            path.remove(path.size()-1);  //backtrack
            return;
        }
        // backtrack dfs
        path.add(root.val);
        helper(root.left,sum-root.val,result,path);
        helper(root.right,sum-root.val,result,path);
        path.remove(path.size()-1);  //backtrack
    }
}
