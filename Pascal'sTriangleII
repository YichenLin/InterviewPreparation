// Solution simply from Pascal's Triangle I

public class Solution {
    public ArrayList<Integer> getRow(int rowIndex) {
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        for(int i=0; i<=rowIndex; i++){
            ArrayList<Integer> row = new ArrayList<Integer>();
            row.add(1);
            if(rowIndex==0) return row;
            if(i>0){
                for(int j=0; j<res.get(i-1).size()-1; j++){
                    row.add(res.get(i-1).get(j)+res.get(i-1).get(j+1));
                }
                row.add(1);
            }
            res.add(row);
        }

        return res.get(rowIndex);
    }
}


// use only O(k) extra space
// thought: [1,3,3,1] is from [1,1+2,2+1,1] which is basically from last row

public class Solution {
    public ArrayList<Integer> getRow(int rowIndex) {
        ArrayList<Integer> row = new ArrayList<Integer>();
        if(rowIndex==0){
            row.add(1);
            return row;
        }
        // last element
        row.add(1);
        // i: row counter
        for(int i=1;i<=rowIndex;i++){
            // first element
            row.add(0,1);
            // j: elements in this row
            // from the second element
            for(int j=1; j<=i-1;j++){
                // [1,2,1]-->[1,3,3,1]
                row.set(j,row.get(j)+row.get(j+1));
            }
        }
        return row;
    }
}

